name: Chocolatine

on:
  push:
    branches-ignore:
      - 'ga-ignore-*'
  pull_request:
    branches-ignore:
      - 'ga-ignore-*'

env:
  MIRROR_URL: ${{ vars.MIRROR_URL }}
  EPITECH_TOKEN: ${{ secrets.EPITECH_TOKEN }}

jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Check coding style
        run: |
          check.sh $(pwd) $(pwd)
          if [ -f coding-style-reports.log ]; then
            echo "ERROR_LOG=$(cat coding-style-reports.log)" >> $GITHUB_ENV
            exit 1
          fi

      - name: Create check run
        if: failure()
        run: |
          curl -X POST -H "Authorization: token ${{ env.EPITECH_TOKEN }}" -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/check-runs \
            -d '{
              "name": "Coding Style Check",
              "head_sha": "${{ github.sha }}",
              "status": "completed",
              "conclusion": "failure",
              "output": {
                "title": "Coding Style Errors",
                "summary": "Found coding style errors",
                "annotations": [
                  $(
                    IFS=$'\n'
                    annotations=()
                    for line in $ERROR_LOG; do
                      file=$(echo "$line" | cut -d ':' -f 1)
                      line_number=$(echo "$line" | cut -d ':' -f 2)
                      error_message=$(echo "$line" | cut -d ':' -f 3-)
                      annotations+=("{\"path\":\"$file\",\"start_line\":$line_number,\"end_line\":$line_number,\"annotation_level\":\"failure\",\"message\":\"$error_message\"}")
                    done
                    echo "${annotations[*]}" | sed 's/} {/},{/g'
                  )
                ]
              }
            }'

  push_to_mirror:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up SSH
        run: |
          echo "${{ env.EPITECH_TOKEN }}" > private_key.pem
          chmod 600 private_key.pem
          ssh-keyscan -t rsa -H "$(echo "${{ env.MIRROR_URL }}" | awk -F@ '{print $2}' | awk -F/ '{print $1}' | awk -F: '{print $1}')" >> known_hosts
          export GIT_SSH_COMMAND="ssh -i private_key.pem -o UserKnownHostsFile=known_hosts"

      - name: Mirror repository
        uses: pixta-dev/repository-mirroring-action@main
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ env.EPITECH_TOKEN }}